(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{294:function(t,e,v){"use strict";v.r(e);var s=v(2),a=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("MVVM模式，"),e("code",[t._v("M")]),t._v("即 model，数据模型；"),e("code",[t._v("V")]),t._v("即 view，视图；"),e("code",[t._v("VM")]),t._v("即 view-model，视图模型。")]),t._v(" "),e("img",{attrs:{src:t.$withBase("/img/page/mvvm.png")}}),t._v(" "),e("h2",{attrs:{id:"理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#理解"}},[t._v("#")]),t._v(" 理解")]),t._v(" "),e("p",[t._v("首先，数据Model通过Data Bindings把数据绑定在View视图上，")]),t._v(" "),e("p",[t._v("当View视图有交互（有改变）的时候，Dom listeners会自动监听，然后更新数据Model。")]),t._v(" "),e("h2",{attrs:{id:"什么是mvvm模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是mvvm模式"}},[t._v("#")]),t._v(" 什么是MVVM模式？")]),t._v(" "),e("p",[t._v("A：MVVM模式，第一个M代表数据模型，V代表视图，VM代表视图模型；\n它的实际操作原理是：后台数据通过视图模型来渲染视图，就是页面。当用户在页面上进行操作的时候，\n视图模型会自动监听到用户的操作，从而改变后台数据。")])])}),[],!1,null,null,null);e.default=a.exports}}]);